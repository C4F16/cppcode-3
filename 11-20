#11
#include <iostream>
#include <iomanip>
#include <ctime>

using namespace std;

int RandomNumber(int From, int To)
{
    int randNum = rand() % (To - From + 1) + From;
    return randNum;
}

void FillMatrixWithRandomNumbers(int array[3][3], int row, int colom)
{
    for (int i = 0; i < row; i++)
    {
        for (int j = 0; j < colom; j++)
        {
            array[i][j] = RandomNumber(1, 10);
        }
    }
}

void PrintMatrix(int array[3][3], int row, int colom)
{
    for (int i = 0; i < row; i++)
    {
        for (int j = 0; j < colom; j++)
        {
            printf(" %0*d ", 2, array[i][j]);
        }
        cout << "\n";
    }
}



int SumOfMatrix(int Matrix1[3][3], int row, int colom)
{
    int Sum = 0;
    for (int i = 0; i < row; i++)
    {
        for (int j = 0; j < colom; j++)
        {
            Sum += Matrix1[i][j];
        }
    }
    return Sum;
}
bool AreEqualMatrix(int Matrix1[3][3],int Matrix2[3][3], int row, int colom) {
    return (SumOfMatrix(Matrix1, row, colom) == SumOfMatrix(Matrix2, row, colom));
}
int main()
{
    srand((unsigned)time(NULL));

    int Matrix1[3][3], Matrix2[3][3];

    FillMatrixWithRandomNumbers(Matrix1, 3, 3);
    cout << "Matrix 1 : " << endl;
    PrintMatrix(Matrix1, 3, 3);

    FillMatrixWithRandomNumbers(Matrix2, 3, 3);
    cout << "Matrix 2 : " << endl;
    PrintMatrix(Matrix2, 3, 3);

    if (AreEqualMatrix(Matrix1, Matrix2, 3, 3))
        cout << "yes the martices are equal" << endl;
    else

        cout << "No the martices are not equal" << endl;

    
    return 0;
}
---------------------------------------------
#12
#include <iostream>
#include <ctime>
#include <iomanip>
using namespace std;

int RandomNumber(int From, int To)
{
    int randNum = rand() % (To - From + 1) + From;
    return randNum;
}

void FillMatrixWithRandomNumbers(int array[3][3], int row, int colom)
{
    for (int i = 0; i < row; i++)
    {
        for (int j = 0; j < colom; j++)
        {
            array[i][j] = RandomNumber(1, 10);
        }
    }
}

void PrintMatrix(int array[3][3], int row, int colom)
{
    for (int i = 0; i < row; i++)
    {
        for (int j = 0; j < colom; j++)
        {
            printf(" %0*d ", 2, array[i][j]);
        }
        cout <<endl;
    }
}

bool AreTypicalMatrix(int Matrix1[3][3], int Matrix2[3][3], int row, int colom)
{
    for (int i = 0; i < row; i++)
    {
        for (int j = 0; j < colom; j++)
        {
            if (Matrix1[i][j] != Matrix2[i][j])
            {
                return false;
            }
        }
    }
    return true;
}

int main()
{
    srand((unsigned)time(NULL));

    int Matrix1[3][3], Matrix2[3][3];

    FillMatrixWithRandomNumbers(Matrix1, 3, 3);
    cout << "Matrix 1 : " << endl;
    PrintMatrix(Matrix1, 3, 3);

    FillMatrixWithRandomNumbers(Matrix2, 3, 3);
    cout << "Matrix 2 : " << endl;
    PrintMatrix(Matrix2, 3, 3);

    if (AreTypicalMatrix(Matrix1, Matrix2, 3, 3))
        cout << "Yes both matrices are typical" << endl;
    else
        cout << "No matrices are not typical" << endl;

    return 0;
}

---------------------------------------------
#13
#include <iostream>
#include <iomanip>
#include <ctime>

using namespace std;

void PrintMatrix(int array[3][3], int row, int colom)
{
    for (int i = 0; i < row; i++)
    {
        for (int j = 0; j < colom; j++)
        {
            cout << setw(3) << array[i][j] << " ";
        }
        cout << endl;
    }
}

bool IsIdentityMatrix(int array[3][3], int row, int colom)
{
    for (int i = 0; i < row; i++)
    {
        for (int j = 0; j < colom; j++)
        {
            if (i == j && array[i][j] != 1)
            {
                return false;
            }
            else if (i != j && array[i][j] != 0)
            {
                return false;
            }
        }
    }
    return true;
}

int main()
{
    int array[3][3] = { {1, 0, 0}, {0, 1, 0}, {0, 0, 1} };

    cout << "Matrix 1 : " << endl;
    PrintMatrix(array, 3, 3);

    if (IsIdentityMatrix(array, 3, 3))
        cout << "yes the matrix is identity" << endl;
    else
        cout << "No the matrix is not identity" << endl;

    return 0;
}

-------------------------------------------------
#14
#include <iostream>
#include <iomanip>
#include <ctime>

using namespace std;

void PrintMatrix(int array[3][3], int row, int colom)
{
    for (int i = 0; i < row; i++)
    {
        for (int j = 0; j < colom; j++)
        {
            cout << setw(3) << array[i][j] << " ";
        }
        cout << endl;
    }
}

bool IsScalarMatrix(int array[3][3], int row, int colom)
{
    int firstdiagelement = array[0][0];
    for (int i = 0; i < row; i++)
    {
        for (int j = 0; j < colom; j++)
        {
            if (i == j && array[i][j] != firstdiagelement)
            {
                return false;
            }
            else if (i != j && array[i][j] != 0)
            {
                return false;
            }
        }
    }
    return true;
}

int main()
{
    int array[3][3] = { {9, 0, 0}, {0, 9, 0}, {0, 0, 9} };

    cout << "Matrix 1 : " << endl;
    PrintMatrix(array, 3, 3);

    if (IsScalarMatrix(array, 3, 3))
        cout << "yes Matrix is scalar " << endl;
    else
        cout << "No Matrix is not scalar " << endl;

    return 0;
}

--------------------------------------------
#15
#include <iostream>
#include <iomanip>
#include <ctime>

using namespace std;

void PrintMatrix(int array[3][3], int Row, int Colom)
{
    for (int i = 0; i < Row; i++)
    {
        for (int j = 0; j < Colom; j++)
        {
            cout << setw(3) << array[i][j] << " ";
        }
        cout << endl;
    }
}

int CountNumberInMatrix(int Matrix1[3][3], int Number, int Row, int Colom)
{
    int NumberCount = 0;
    for (int i = 0; i < Row; i++)
    {
        for (int j = 0; j < Colom; j++)
        {
            if (Matrix1[i][j] == Number)
            {
                NumberCount++;
            }
        }
    }
    return NumberCount;
}

int main()
{
    int Matrix1[3][3] = { {1,5,5},{7,9,6},{2,4,3} };
    cout << "Matrix 1 : " << endl;
    PrintMatrix(Matrix1, 3, 3);

    int Num;
    cout << "enter the number to count in matrix? " << endl;
    cin >> Num;

    cout << "Number " << Num << " count in matrix is " << CountNumberInMatrix(Matrix1, Num, 3, 3) << endl;
}

--------------------------------------------------------
#16
#include <iostream>
#include <iomanip>
#include<ctime>
using namespace std;

void PrintMatrix(int array[3][3], short row, short colom)
{
	for (short i = 0; i < row; i++)
	{
		for (short j = 0; j < colom; j++)
		{
			cout << setw(3) << array[i][j] << " ";
		}
		cout << endl;
	}
}
short CountNumberInMatrix(int Matrix1[3][3], int Number, int row, int colom)
{
	int NumberCount = 0;
	for (int i = 0; i < row; i++)
	{
		for (int j = 0; j < colom; j++)
		{
			if (Matrix1[i][j] == Number)
			{
				NumberCount++;
			};
		}
	}
	return NumberCount;
}
bool IsSparseMatrix(int Matrix1[3][3], int row, int colom)
{
	int MatrixSize = row * colom;
	return (CountNumberInMatrix(Matrix1, 0, 3, 3) >= ceil((float)MatrixSize / 2));
}
int main()
{
	int Matrix1[3][3] = { {0,0,12},{9,9,1},{0,0,9} };

	cout << "Matrix 1 : " << endl;
	PrintMatrix(Matrix1, 3, 3);

	if (IsSparseMatrix(Matrix1, 3, 3))
		cout << "yes it is Sparse" << endl;
	else
		cout << "no it is not Sparse" << endl;

	return 0;

}
------------------------------------------------
#17
#include <iostream>
#include <iomanip>
#include<ctime>

using namespace std;

void PrintMatrix(int array[3][3], int row, int colom)
{
	for (int i = 0; i < row; i++)
	{
		for (int j = 0; j < colom; j++)
		{
			cout << setw(3) << array[i][j] << " ";
		}
		cout << endl;
	}
}

bool IsNumberInMatrix(int Matrix1[3][3], int Number, int row, int colom)
{
	int Count = 0;

	for (int i = 0; i < row; i++)
	{
		for (int j = 0; j < colom; j++)
		{
			if (Matrix1[i][j] == Number)
			{
				return true;
			};
		}
	}
	return false;
}
int main()
{
	int Matrix1[3][3] = { {77,5,12},{22,20,1},{1,0,9} };

	cout << "Matrix 1 : " << endl;
	PrintMatrix(Matrix1, 3, 3);

	int Number;

	cout << "enter the number to look for in matrix " << endl;
	cin >> Number;

	if (IsNumberInMatrix(Matrix1, Number, 3, 3))
		cout << "yes it is there" << endl;
	
	else {
		cout << "no it is not there" << endl;
		}

	return 0;

}
--------------------------------------------
#18
#include <iostream>
#include <string>
#include <iomanip>

using namespace std;

void PrintMatrix(int array[3][3], int row, int colom)
{
	for (int i = 0; i < row; i++)
	{
		for (int j = 0; j < colom; j++)
		{
			cout << setw(3) << array[i][j] << " ";
		}
		cout << endl;
	}
}
bool IsNumberInMatrix(int Matrix1[3][3], int Number, int row, int colom)
{
	int Count = 0;

	for (int i = 0; i < row; i++)
	{
		for (int j = 0; j < colom; j++)
		{
			if (Matrix1[i][j] == Number)
			{
				return true;
			};
		}
	}
	return false;
}
void PrintIntersectedNumber(int Matrix1[3][3], int Matrix2[3][3],int row, int colom)
{
	int Number;

	for (int i = 0; i < row; i++)
	{
		for (int j = 0; j < colom; j++)
		{
			Number = Matrix1[i][j];
			if (IsNumberInMatrix(Matrix2, Number, row, colom))
			{
				cout << setw(3) << Number << " ";
			}
		}
	}
	cout << endl;
}
int main()
{
	int Matrix1[3][3] = { {77,5,12},{22,20,1},{1,0,9} };

	int Matrix2[3][3] = { {5,80,90},{22,77,1},{10,8,33} };

	cout << endl << "matrix 1 : " << endl;
	PrintMatrix(Matrix1, 3, 3);

	cout << endl << "matrix 2 : " << endl;
	PrintMatrix(Matrix2, 3, 3);

	cout << endl << "intersected Numbers are : " << endl;
	PrintIntersectedNumber(Matrix1, Matrix2, 3, 3);

	return 0;
}
------------------------------------------
#19
#include <iostream>
#include <iomanip>
#include<ctime>

using namespace std;

void PrintMatrix(int array[3][3], int row, int colom)
{
	for (int i = 0; i < row; i++)
	{
		for (int j = 0; j < colom; j++)
		{
			cout << setw(3) << array[i][j] << " ";
		}
		cout << endl;
	}
}
int MinNumberInMatrix(int Matrix1[3][3], int row, int colom)
{
	int Min = Matrix1[0][0];

	for (int i = 0; i < row; i++)
	{
		for (int j = 0; j < colom; j++)
		{
			if (Matrix1[i][j] < Min)
			{
				Min = Matrix1[i][j];
			}
		}
	}
	return Min;
}
int MaxNumberInMatrix(int Matrix1[3][3], int row, int colom)
{
	int Max = Matrix1[0][0];

	for (int i = 0; i < row; i++)
	{
		for (int j = 0; j < colom; j++)
		{
			if (Matrix1[i][j] > Max)
			{
				Max = Matrix1[i][j];
			}
		}
	}
	return Max;
}
int main()
{
	int Matrix1[3][3] = { {77,5,12},{22,20,6},{14,3,9} };

	cout << "Matrix 1 : " << endl;
	PrintMatrix(Matrix1, 3, 3) ;

	cout << "Minimum Number is : " ;
	cout << MinNumberInMatrix(Matrix1, 3, 3) << endl;

	cout << "Max Number is : " ;
	cout << MaxNumberInMatrix(Matrix1, 3, 3) << endl;
	
	return 0; 
}
-----------------------------------------
#20
#include <iostream>
#include <iomanip>
#include <ctime>

using namespace std;

void PrintMatrix(int array[3][3], int row, int colom)
{
	for (int i = 0; i < row; i++)
	{
		for (int j = 0; j < colom; j++)
		{
			cout << setw(3) << array[i][j] << " ";
		}
		cout << endl;
	}
}
int IsPalindromeMatrix(int Matrix1[3][3], int row, int colom)
{
	for (int i = 0; i < row; i++)
	{
		for (int j = 0; j < colom / 2; j++)
		{
			if (Matrix1[i][j] != Matrix1[i][colom - 1 - j])
			{
				return false;
			}
		}
	}
	return true;
}
int main()
{
	int Matrix1[3][3] = { {1,2,1},{5,5,5},{7,3,7} };

	cout << "Matrix 1 : " << endl;
	PrintMatrix(Matrix1, 3, 3);

	if (IsPalindromeMatrix(Matrix1, 3, 3))
	
		cout << "yes matrix is Palindrome " << endl;
	
	else
		cout << "no matrix is not Palindrome " << endl;
	
	return 0;

}
